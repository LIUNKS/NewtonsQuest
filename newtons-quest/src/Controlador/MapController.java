package Controlador;

import Controlador.componentes.LevelManager;
import Controlador.componentes.RankingManager;
import Controlador.componentes.VideoManager;
import Controlador.dialogs.VideoSelectionDialog;
import Controlador.navigation.NavigationManager;
import Controlador.utils.ErrorHandler;
import Controlador.utils.SessionManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.stage.Stage;

public class MapController {
    
    @FXML private Button btnJugar;
    @FXML private Button btnVideo;
    @FXML private Button btnQuiz;
    @FXML private AnchorPane mapBackground; // A√±adimos referencia al AnchorPane
    
    // Managers para acceso a informaci√≥n del juego
    private VideoManager videoManager;
    private RankingManager rankingManager;
    
    public void initialize() {
        try {
            // MapController inicializado
            
            // Inicializar managers
            videoManager = VideoManager.getInstance();
            rankingManager = RankingManager.getInstance();
            
            // Cargar la imagen de fondo
            loadBackgroundImage();
            
            // Configurar el estado inicial del bot√≥n del quiz
            updateQuizButtonState();
            
            // Configurar datos del usuario actual (debug deshabilitado)
            // debugUserData();
            
            // Configurar eventos de teclado para la escena
            btnJugar.sceneProperty().addListener((obs, oldScene, newScene) -> {
                if (newScene != null) {
                    newScene.setOnKeyPressed(event -> {
                        if (event.getCode() == KeyCode.ESCAPE) {
                            returnToMainMenu();
                        }
                    });
                }
            });
            
        } catch (Exception e) {
            System.err.println("Error al inicializar MapController: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Actualiza el estado visual del bot√≥n del quiz seg√∫n el progreso del usuario
     */
    private void updateQuizButtonState() {
        try {
            boolean allFormulasUnlocked = areAllFormulasUnlocked();
            int unlockedCount = countUnlockedFormulas();
            
            if (allFormulasUnlocked) {
                // Todas las f√≥rmulas desbloqueadas - bot√≥n habilitado
                btnQuiz.setDisable(false);
                btnQuiz.setText("Quiz");
                btnQuiz.setStyle("-fx-background-color: #27ae60; -fx-text-fill: white; -fx-font-weight: bold;");
                // Bot√≥n del quiz habilitado - Todas las f√≥rmulas desbloqueadas
            } else {
                // No todas las f√≥rmulas desbloqueadas - bot√≥n deshabilitado visualmente
                btnQuiz.setDisable(false); // Mantenemos habilitado para mostrar el mensaje
                btnQuiz.setText("Quiz (" + unlockedCount + "/5)");
                btnQuiz.setStyle("-fx-background-color: #95a5a6; -fx-text-fill: #2c3e50; -fx-font-weight: bold;");
                // Bot√≥n del quiz marcado como bloqueado
            }
            
        } catch (Exception e) {
            System.err.println("Error al actualizar estado del bot√≥n del quiz: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Carga la imagen de fondo directamente desde c√≥digo
     */
    private void loadBackgroundImage() {
        try {
            // Ruta de la imagen
            String imagePath = "src/recursos/imagenes/map_background.jpg";
            File imageFile = new File(imagePath);
            
            Image backgroundImage;
            
            if (imageFile.exists()) {
                // Estamos en desarrollo, usar ruta de archivo
                backgroundImage = new Image(new FileInputStream(imageFile));
                // Imagen de fondo del mapa cargada
            } else {
                // Estamos en producci√≥n, usar getResource
                backgroundImage = new Image(getClass().getResourceAsStream("/recursos/imagenes/map_background.jpg"));
                // Imagen de fondo del mapa cargada desde recursos
            }
            
            // Crear el objeto BackgroundImage
            BackgroundImage bgImage = new BackgroundImage(
                backgroundImage, 
                BackgroundRepeat.NO_REPEAT, 
                BackgroundRepeat.NO_REPEAT, 
                BackgroundPosition.CENTER, 
                new BackgroundSize(100, 100, true, true, false, true)
            );
            
            // Establecer el fondo
            mapBackground.setBackground(new Background(bgImage));
              } catch (Exception e) {
            System.err.println("Error al cargar la imagen de fondo del mapa: " + e.getMessage());
            e.printStackTrace();
            ErrorHandler.logWarning("No se pudo cargar la imagen de fondo del mapa: " + e.getMessage());
            // Tambi√©n podemos usar handleResourceError que es espec√≠fico para errores de recursos
            ErrorHandler.handleResourceError("imagen de fondo del mapa", e);
        }
    }
      @FXML
    private void onJugarButtonClick(ActionEvent event) {
        try {
            // Iniciando juego desde el mapa
              // Cargar la pantalla del juego
            String gameFxmlPath = "src/Vista/Game.fxml";
            String gameCssPath = "src/Vista/resources/game.css";
            
            // Verificar si estamos en desarrollo o en producci√≥n
            File gameFxmlFile = new File(gameFxmlPath);
            File gameCssFile = new File(gameCssPath);
            
            FXMLLoader loader;
            String cssPath;
            
            if (gameFxmlFile.exists()) {
                // Estamos en desarrollo, usar ruta de archivo
                loader = new FXMLLoader(gameFxmlFile.toURI().toURL());
                cssPath = gameCssFile.toURI().toURL().toExternalForm();            } else {                // Estamos en producci√≥n, usar getResource
                loader = new FXMLLoader(getClass().getResource("/Vista/Game.fxml"));
                cssPath = getClass().getResource("/Vista/resources/game.css").toExternalForm();
            }
            
            // Cargar la pantalla del juego
            Parent root = loader.load();
            
            // Crear una nueva escena
            Scene scene = new Scene(root, 900, 700);
            
            // A√±adir el CSS
            scene.getStylesheets().add(cssPath);
            
            // Obtener el stage actual
            Stage stage = (Stage) btnJugar.getScene().getWindow();
            
            // Cambiar la escena
            stage.setScene(scene);
            stage.setTitle("Newton's Apple Quest - Juego");
            
            // Juego iniciado correctamente
            
        } catch (IOException e) {
            System.err.println("Error al cargar la pantalla del juego: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Error inesperado al iniciar el juego: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    @FXML
    private void onVideoButtonClick(ActionEvent event) {
        try {
            // Mostrando di√°logo de selecci√≥n de videos
            
            // Obtener las f√≥rmulas desbloqueadas del usuario actual
            boolean[] unlockedFormulas = getUserUnlockedFormulas();
            
            // Crear y mostrar el di√°logo de selecci√≥n de videos
            VideoSelectionDialog videoDialog = new VideoSelectionDialog();
            Stage currentStage = (Stage) btnVideo.getScene().getWindow();
            videoDialog.show(currentStage, unlockedFormulas);
            
        } catch (Exception e) {
            System.err.println("Error al mostrar videos: " + e.getMessage());
            e.printStackTrace();
            ErrorHandler.handleResourceError("sistema de videos", e);
        }
    }    
    @FXML
    private void onQuizButtonClick(ActionEvent event) {
        try {
            // Verificando acceso al quiz
            
            // Verificar si el usuario ha desbloqueado todas las f√≥rmulas
            if (!areAllFormulasUnlocked()) {
                // Acceso al quiz denegado
                
                // Mostrar mensaje informativo al usuario
                Stage currentStage = (Stage) btnQuiz.getScene().getWindow();
                int unlockedCount = countUnlockedFormulas();
                
                String mensaje = "Para acceder al quiz y poner a prueba tus conocimientos sobre las leyes de Newton, " +
                               "primero debes desbloquear todas las f√≥rmulas f√≠sicas jugando.\n\n" +
                               "üìä PROGRESO ACTUAL: " + unlockedCount + "/5 f√≥rmulas desbloqueadas\n\n" +
                               getProgressDetails() + "\n" +
                               "üéÆ C√ìMO CONTINUAR:\n" +
                               "‚Ä¢ Juega y recoge manzanas para ganar puntos\n" +
                               "‚Ä¢ Evita las manzanas rojas y usa las pociones sabiamente\n" +
                               "‚Ä¢ Cada umbral de puntaje desbloquea una nueva f√≥rmula\n\n" +
                               "üèÜ Una vez que hayas desbloqueado las 5 f√≥rmulas, podr√°s acceder al quiz " +
                               "y demostrar que eres un verdadero experto en f√≠sica como Newton.";
                
                ErrorHandler.showInfoDialog(
                    "üîí Quiz Bloqueado",
                    "¬°Completa tu aprendizaje primero!",
                    mensaje,
                    currentStage
                );
                return;
            }
            
            // Acceso al quiz permitido - Todas las f√≥rmulas desbloqueadas
            // Iniciando quiz desde el mapa
            
            Stage stage = (Stage) btnQuiz.getScene().getWindow();
            NavigationManager.navigateToQuiz(stage);
            
            // Quiz iniciado correctamente
            
        } catch (IOException e) {
            System.err.println("Error al cargar la pantalla del quiz: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Error inesperado al iniciar el quiz: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    @FXML
    private void onBackToMainMenuClick(ActionEvent event) {
        returnToMainMenu();
    }
    
    // M√©todo para volver al men√∫ principal
    private void returnToMainMenu() {
        try {
            // Volviendo al men√∫ principal desde el mapa
            
            Stage stage = (Stage) btnJugar.getScene().getWindow();
            NavigationManager.navigateToMainWithUser(stage);
            
            // Vuelto al men√∫ principal correctamente
            
        } catch (IOException e) {
            System.err.println("Error al cargar el men√∫ principal: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Error inesperado al volver al men√∫ principal: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Obtiene informaci√≥n detallada sobre el progreso de f√≥rmulas del usuario
     * @return String con informaci√≥n detallada del progreso
     */
    private String getProgressDetails() {
        boolean[] unlockedFormulas = getUserUnlockedFormulas();
        StringBuilder details = new StringBuilder();
        
        // Nombres de las f√≥rmulas f√≠sicas
        String[] formulaNames = {
            "F = m √ó g (Fuerza de gravedad)",
            "v = d / t (Velocidad media)",
            "U = m √ó g √ó h (Energ√≠a potencial)",
            "K = ¬Ω √ó m √ó v¬≤ (Energ√≠a cin√©tica)",
            "a = (vf - vi) / t (Aceleraci√≥n)"
        };
        
        // Umbrales de puntaje para cada f√≥rmula
        int[] thresholds = {100, 250, 450, 700, 1000};
        
        details.append("üìã ESTADO DE LAS F√ìRMULAS:\n\n");
        
        for (int i = 0; i < formulaNames.length; i++) {
            if (unlockedFormulas[i]) {
                details.append("‚úÖ ").append(formulaNames[i]).append(" - DESBLOQUEADA\n");
            } else {
                details.append("üîí ").append(formulaNames[i]).append(" - Requiere ").append(thresholds[i]).append(" puntos\n");
            }
        }
        
        return details.toString();
    }
    
    /**
     * Verifica si todas las f√≥rmulas est√°n desbloqueadas para el usuario actual
     * @return true si todas las f√≥rmulas est√°n desbloqueadas, false en caso contrario
     */
    private boolean areAllFormulasUnlocked() {
        boolean[] unlockedFormulas = getUserUnlockedFormulas();
        
        // Verificar que todas las 5 f√≥rmulas est√©n desbloqueadas
        for (boolean unlocked : unlockedFormulas) {
            if (!unlocked) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Cuenta el n√∫mero de f√≥rmulas desbloqueadas por el usuario actual
     * @return n√∫mero de f√≥rmulas desbloqueadas (0-5)
     */
    private int countUnlockedFormulas() {
        boolean[] unlockedFormulas = getUserUnlockedFormulas();
        int count = 0;
        
        for (boolean unlocked : unlockedFormulas) {
            if (unlocked) {
                count++;
            }
        }
        
        return count;
    }
    
    /**
     * Obtiene las f√≥rmulas desbloqueadas del usuario actual
     * Se basa en el mejor puntaje del usuario para determinar qu√© f√≥rmulas tiene disponibles
     * @return Array de booleanos indicando qu√© f√≥rmulas est√°n desbloqueadas
     */
    private boolean[] getUserUnlockedFormulas() {
        boolean[] unlockedFormulas = new boolean[5];
        
        try {
            // Obtener el ID del usuario actual de la sesi√≥n
            SessionManager sessionManager = SessionManager.getInstance();
            
            if (sessionManager.isLoggedIn()) {
                int currentUserId = sessionManager.getCurrentUserId();
                
                // Obtener el n√∫mero de f√≥rmulas completadas desde la tabla usuarios
                int formulasCompletadas = Modelo.dao.UsuarioDAO.obtenerFormulasCompletadasUsuario(currentUserId);
                
                // Desbloquear f√≥rmulas bas√°ndose en el progreso guardado
                for (int i = 0; i < 5; i++) {
                    unlockedFormulas[i] = (i < formulasCompletadas);
                }
                
                // F√≥rmulas completadas cargadas del usuario
            } else {
                // No hay usuario en sesi√≥n, todas las f√≥rmulas bloqueadas
                // Si no hay usuario en sesi√≥n, todas las f√≥rmulas est√°n bloqueadas
                for (int i = 0; i < 5; i++) {
                    unlockedFormulas[i] = false;
                }
            }
            
        } catch (Exception e) {
            System.err.println("Error al obtener f√≥rmulas desbloqueadas: " + e.getMessage());
            // En caso de error, asumir que no hay f√≥rmulas desbloqueadas
            for (int i = 0; i < 5; i++) {
                unlockedFormulas[i] = false;
            }
        }
        
        return unlockedFormulas;
    }
    
    /**
     * Cuenta cu√°ntas f√≥rmulas est√°n desbloqueadas
     * @param unlockedFormulas Array de f√≥rmulas desbloqueadas
     * @return N√∫mero de f√≥rmulas desbloqueadas
     */
    private int countUnlocked(boolean[] unlockedFormulas) {
        int count = 0;
        for (boolean unlocked : unlockedFormulas) {
            if (unlocked) count++;
        }
        return count;
    }
    
    /**
     * M√©todo p√∫blico para actualizar el estado del mapa cuando el usuario regrese del juego
     * Esto permite que el bot√≥n del quiz se actualice si se desbloquearon m√°s f√≥rmulas
     */
    public void refreshMapState() {
        updateQuizButtonState();
        // Estado del mapa actualizado
    }
    
    /**
     * M√©todo temporal de debug para verificar los datos del usuario (deshabilitado)
     */
    private void debugUserData() {
        // M√©todo de debug deshabilitado para mantener la consola limpia
    }
}
